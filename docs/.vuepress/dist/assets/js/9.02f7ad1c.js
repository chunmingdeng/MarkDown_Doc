(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{223:function(t,a,r){"use strict";r.r(a);var e=r(28),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"toturial"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#toturial"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("toturial"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"git命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" git命令")]),t._v(" "),r("blockquote",[r("p",[r("code",[t._v("git add .")]),r("br"),t._v(" "),r("code",[t._v("git commit -m <message: string>")]),r("br"),t._v(" "),r("code",[t._v("git commit -amend")]),t._v(" #本次的提交追加在上次的提交里面合为一次，必须在git add .之后才能执行本命令"),r("br"),t._v(" "),r("code",[t._v("git remote add origin <url>")]),t._v(" #添加远程仓库的地址"),r("br")])]),t._v(" "),r("h3",{attrs:{id:"删除命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除命令"}},[t._v("#")]),t._v(" 删除命令")]),t._v(" "),r("p",[t._v("git branch -D <branch_name> #删除本地仓库的某个分支"),r("br"),t._v("\ngit push <repository_name> --delete <branch_name> #删除远程的某个分支"),r("br"),t._v("\ngit push <repository_name> :<branch_name> #同样是删除远程分支的另一种方法"),r("br"),t._v("\ngit push rm <repository_name> #删除远程的某个仓库"),r("br")]),t._v(" "),r("h3",{attrs:{id:"仓库相关命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#仓库相关命令"}},[t._v("#")]),t._v(" 仓库相关命令")]),t._v(" "),r("p",[t._v("git fetch <repository_name> #同步远程服务器数据到本地\ngit remote show #可以查看到远程有多少仓库"),r("br"),t._v("\ngit remote -v #可以查看远程仓库以及其对应的仓库地址"),r("br"),t._v("\ngit remote show <repository_name> #查看远程的指定仓库"),r("br"),t._v("\ngit remote rename pb Paul  #修改某个远程仓库在本地的简称"),r("br")]),t._v(" "),r("h3",{attrs:{id:"分支相关命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支相关命令"}},[t._v("#")]),t._v(" 分支相关命令")]),t._v(" "),r("p",[t._v("git branch -vv #查看本地分支对应的远程分支"),r("br"),t._v("\ngit branch -a #查看所有的本地及远程分支"),r("br"),t._v("\ngit branch -v # 查看各个分支最后一个提交信息"),r("br"),t._v("\ngit remote prune <repository_name> #清楚远程仓库的无效分支（远程删除了，但是本地还有之前记录）")]),t._v(" "),r("h3",{attrs:{id:"取消提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#取消提交"}},[t._v("#")]),t._v(" 取消提交")]),t._v(" "),r("p",[t._v("git reset --hard <commit_id> #彻底回退到commit_id的版本，本地源码页恢复到commit_id版本（撤销commit和add）"),r("br"),t._v("\ngit reset --soft <commit_id> #回退到commit_id版本，但是本地的修改可以提交（撤销commit但是add保留）"),r("br"),t._v("\ngit reset <commit_id> #默认使用--mixed选项，回退到commit_id版本，修改的文件需要git add后才能提交"),r("br"),t._v("\ngit checkout <commit_id> <file_name> #取消<file_name>的<commit_id>版本提交 "),r("br")]),t._v(" "),r("h3",{attrs:{id:"修改提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改提交"}},[t._v("#")]),t._v(" 修改提交")]),t._v(" "),r("p",[t._v("git commit --amend #修改最后一次提交。先git add 新的changes，然后再跑这个命令重新提交"),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("如何撤销--amend的某次提交")]),t._v(" "),r("blockquote",[r("p",[t._v("git reflog #查看提交的历史记录，区别于git log"),r("br"),t._v("\ngit reset HEAD@{<number>} #reset到指定的commit_hash")])])]),t._v(" "),r("h3",{attrs:{id:"合并提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并提交"}},[t._v("#")]),t._v(" 合并提交")]),t._v(" "),r("p",[t._v("git rebase -i HEAD~<number> #number需要合并的commit的个数，从当前位置向前推")]),t._v(" "),r("h3",{attrs:{id:"暂存修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#暂存修改"}},[t._v("#")]),t._v(" 暂存修改")]),t._v(" "),r("p",[t._v("git stash save -a <message_info> #"),r("br"),t._v("\ngit stash list #展示所有的stash"),r("br"),t._v("\ngit stash pop --index stash@{0} #取出指定index的stash，并在stash list中清除"),r("br"),t._v("\ngit stash apply --index stash@{0} #apply指定index的stash，stash list中仍然存在"),r("br"),t._v("\ngit stash clear #清除所有的stash"),r("br")]),t._v(" "),r("h3",{attrs:{id:"reset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset")]),t._v(" "),r("p",[t._v("git reset HEAD . #在git add .之后可以用来撤销暂存的文件"),r("br")]),t._v(" "),r("h3",{attrs:{id:"checkout"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#checkout"}},[t._v("#")]),t._v(" checkout")]),t._v(" "),r("p",[t._v("git checkout . #在git add .之后执行会撤销所有的文件修改")]),t._v(" "),r("h3",{attrs:{id:"clean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#clean"}},[t._v("#")]),t._v(" clean")]),t._v(" "),r("p",[t._v("git clean -f #删除所有的untracked files"),r("br"),t._v("\ngit clean -fd #删除所有的untracked files & untracked directory"),r("br"),t._v("\ngit clean -xfd #连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）"),r("br")]),t._v(" "),r("blockquote",[r("p",[t._v("在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删")])])])}),[],!1,null,null,null);a.default=s.exports}}]);